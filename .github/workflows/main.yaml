name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  lint_staging:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./layers
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        env:
          ENVIRONMENT_NAME: staging
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ../scripts/lint.sh

  pre_merge_staging:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./layers
    needs: [lint_staging]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Terraform Plan Staging
        id: plan
        env:
          ENVIRONMENT_NAME: staging
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ../scripts/plan.sh
        #if: github.event_name == 'pull_request'
        continue-on-error: true

 
  # approve_deploy_staging:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./layers
  #   needs: [pre_merge_staging, lint_staging]
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials from AWS account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         role-session-name: GitHub-OIDC-TERRAFORM

  #     - name: send_approval_request
  #       uses: peter-evans/create-issue-from-file@v2
  #       with:
  #         title: 'Deployment Approval Request'
  #         labels: 'approval'
  #         body: |
  #           Please approve this deployment by commenting :+1: on this issue.
  #     - name: Wait for approval
  #       uses: andstor/wait-for-approval@v1
  #       with:
  #         issue-number: ${{ steps.send_approval_request.outputs.number }}
  #         repository-token: ${{ secrets.GITHUB_TOKEN }}

  post_merge:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./layers
    needs: [lint_staging, pre_merge_staging]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Terraform Plan Staging
        id: plan
        env:
          ENVIRONMENT_NAME: staging
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ../scripts/plan.sh
        #if: github.event_name == 'pull_request'

      - name: Terraform Apply Staging
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ENVIRONMENT_NAME: staging
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ../scripts/apply.sh
